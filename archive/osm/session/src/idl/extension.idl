/*
 * Copyright 2000-2001 OSM SARL All Rights Reserved.
 * This document is the proprietary information of OSM SARL.
 * Use is subject to license terms.  
 *
 * @author  Stephen McConnell <mailto:mcconnell@osm.net>
 * @version 1.3 18 MAR 2001
 */

#ifndef _OSM_SESSION_IDL_
#define _OSM_SESSION_IDL_
#include <finder.idl>
#include <chooser.idl>
#include <Session.idl>
#include <corbaloc.idl>
#pragma prefix "osm.net"

module session
{
  native List;
  native Iterator;
  native Date;
  native TaskAdapter;
  native UserAdapterPointer;
  native ProcessorAdapter;
  native WorkspaceAdapter;
  native DesktopAdapter;

  module resource
  {

   /**
    * Interface for all managers enabling URL based selection of objects
    * maintained by the manager implementation.
    */
    interface Manager : corbaloc::Chooser {};

   /**
    * An adapter for an <code>AbstractResource</code> that provides 
    * state accessors that follow the EJB patterns.
    */
    abstract valuetype AbstractResourceAdapter : adapter::Adapter
    {
       /**
        * Returns the name of the resource.
        * @return String the resource name
        */
        string getName();

       /**
        * Returns the string representation of the domain managing this
        * resource.
        * @return String the domain
        */
        string getDomain();

       /**
        * Returns an integer value identifying this resources within the 
        * scope of the domain.
        * @return int the resource identifier
        */
        long getIdentity();

       /**
        * Sets the name of the resource to the supplied value.
        * @param name the resource name
        */
        void setName( in string name );

       /**
        * Returns the resource creation date.
        * @return Date the resource creation date
        */
        session::Date getCreationDate();

       /**
        * Returns the resource modification date.
        * @return Date the resource modification date
        */
        session::Date getModificationDate();

       /**
        * Returns the resource last access date.
        * @return Date the resource last access date
        */
        session::Date getAccessDate();

       /**
        * Returns a iterator of the tasks consuming the 
        * resource.
        * @return Iterator of tasks consuming this resource
        */
        session::Iterator getConsumers();

       /**
        * Returns a iterator of the workspaces containing the 
        * resource.
        * @return Iterator of workspaces containing this resource
        */
        session::Iterator getContainers();

       /**
        * Returns a TaskAdapter representing a task that is producing the 
        * resource.
        * @return TaskAdapter a task producing the resource or null if this resource
        *  is not bound to a producing task.
        */
        TaskAdapter getProducer();
    };

   /**
    * Extended <code>AbstractResource</code> interface that includes an adapter
    * accessor.
    */
    interface AbstractResource : Session::AbstractResource, adapter::Adaptive{};

  };

  module workspace
  {
   /**
    * Extended <code>Workspace</code> interface that enables access to
    * an <code>Adapter</code>.
    */
    interface Workspace : Session::Workspace, resource::AbstractResource{};

  };

  module desktop
  {

   /**
    * Extended <code>Desktop</code> interface that enables access to
    * an <code>Adapter</code>.
    */
    interface Desktop : Session::Desktop, workspace::Workspace{};

  };

  module message
  {

   /**
    * The MessagePriority enumeration is an OSM extension to the specification.  It is
    * used within the MessageHeader valuetype exposed by a message_id in the Message
    * resource type.
    */
    enum MessagePriority
    {
      LOW,
      NORMAL,
      HIGH
    };

   /**
    * The MessageClassification enumeration is an OSM extension to the specification.  It is
    * used within the MessageHeader valuetype exposed by a message_id in the Message
    * resource type.
    */
    enum MessageClassification
    {
      INFORM,
      REQUEST,
      WARNING,
      ERROR,
      FATAL
    };

   /**
    * Boxed valuetype containing a string.
    */
    valuetype Text string;

   /**
    * Boxed valuetype containing a resource.
    */
    valuetype MessageSource Session::AbstractResource;

   /**
    * MessageHeader is contained in a SystemMessage and exposes details
    * concerning message priority, message classification, subject and 
    * message source.
    */
    valuetype MessageHeader
    {

       /**
        * The message subject.
        */
        public Text subject;

       /**
        * The message priority.
        */
        public MessagePriority priority;

       /**
        * The message classification.
        */
        public MessageClassification classification;

       /**
        * The message source.
        */
        public MessageSource source;

       /**
        * The message identifier
        */
        public unsigned long long identifier;
    };

   /**
    * StringValue is a convinience boxed valuetype for inclusion as the body 
    * of a minimal message structure.
    */
    valuetype BodyType string;

   /**
    * Boxed value contaiing an any used as a message attachment.
    */
    valuetype BodyAttachment
    {
        public any value;
    };

   /**
    * MessageBody is a valuetype containing a typed message body.
    */
    valuetype MessageBody
    {
       /**
        * The message type.
        */
        public BodyType type;

       /**
        * The message content.
        */
        public Text  message;
    };

   /**
    * The SystemMessage valuetype is an replacement of the Session::Message.
    */
    valuetype SystemMessage 
    {
       /**
        * Message header.
        */
        public MessageHeader header;

       /**
        * Message body.
        */
        public MessageBody body;
    };

   /**
    * Sequence of <code>SystemMessage</code> instances.
    */
    typedef sequence<SystemMessage> SystemMessages;

   /**
    * SystemMessageIterator is an iterator of SystemMessage instances.
    */
    interface SystemMessageIterator : CosCollection :: Iterator { };

   /**
    * The abstract interface Mailbox is an OSM extension that defines a operation 
    * through which the values constituting a message may be equeued and dequeued.
    * The interface negates the requirement for an independent Message resources as 
    * message presentation and message management are implementation concerns that do 
    * impact interoperability.
    */
    abstract interface Mailbox
    {
       /**
        * Adds a message to the queue of unread messages.
        * @param message the message to queue
        */
        void enqueue
        (
            in SystemMessage message
        );

       /**
        * Removes a message to the queue of unread messages.
        * @param identifier the message identifier of the message to dequeue
        */
        void dequeue
        (
            in unsigned long long identifier
        );

       /**
        * List message in the users message tray.
        * @param max_number the maximum number of message to include in the 
        *    <code>messages</code> parameter holder
        * @param message a message sequence holder
        * @return SystemMessageIterator an iterator of system messages
        */
        SystemMessageIterator get_messages
        (
            in long max_number,
            out SystemMessages messages
        );
    };
  };
  
  module user
  {
   /**
    * An adapter providing EJB style access to a <code>User</code>.
    */
    abstract valuetype UserAdapter : resource::AbstractResourceAdapter
    {
       /**
        * Returns the connected state of the user.
        * @return boolean TRUE if the user is connected, otherwise FALSE
        */
        boolean getConnected();

       /**
        * Enqueue a message to this user.
        * @param message the message to enqueue
        */
        void enqueue( in message::SystemMessage _message );
    };

   /**
    * An adapter providing EJB style access to a <code>User</code> whewre 
    * the invoking client is the principal that this user object represents.
    */
    abstract valuetype PrincipalAdapter : UserAdapter 
    {
       /**
        * If the user is disconnected, the operation changes the 
        * connected state of the user to connected.
        */
        void connect();

       /**
        * If the user is connected, the operation changes the 
        * connected state of the user to disconnected.
        */
        void disconnect();

       /**
        * Returns the users desktop.
        * @return DesktopAdapter the user's desktop.
        */
        desktop::DesktopAdapter getDesktop();

       /**
        * Returns an iterator of tasks owned by the user.
        * @return Iterator of owned tasks
        */
        session::Iterator getTasks();

       /**
        * Returns an iterator of message queue against the user.
        * @return Iterator of messages
        */
        session::Iterator getMessages();

       /**
        * Returns an iterator of folders managed by the user
        * @return Iterator of message folders
        */
        session::Iterator getFolders();

       /**
        * Returns an iterator of workspaces assoicated with the user.
        * @return Iterator of workspaces
        */
        session::Iterator getWorkspaces();

       /**
        * Creation of a new <code>TaskAdapter</code> using a supplied 
        * <code>ProcessorAdapter</code>.
        * @param processor the processor to apply as the execution source
        */
        TaskAdapter createTask( in ProcessorAdapter processor );

    };

   /**
    * User is a role of a person in a distributed computing environment. Information  
    * about the person is inherited by User. In this specification Users have tasks  
    * and resources located in workspaces on a desktop, as well as a message queue   
    * and a connection state. A specialization of User can add things like  
    * preferences.  User extends the Session framework notion of User through 
    * access to a <code>UserAdapter</code> enabling simplified interaction.
    */
    interface User : Session::User, message::Mailbox, resource::AbstractResource
    {
    };
  };

  module task
  {

   /**
    * The <code>net.osm.session.Task</code> interface extends the classic Task 
    * defintion by including the behaviour of an <code>StructuredPushConsumer</code>.
    * This addition enables the task to register itself as a listener on the processor it
    * is coordinating.
    */
    interface Task : Session::Task, Session::IdentifiableDomainConsumer, resource::AbstractResource{};
  };

  module processor
  {

     /**
      * An adapter providing EJB style access to a <code>Processor</code>.
      */
      abstract valuetype AbstractProcessorAdapter : resource::AbstractResourceAdapter
      {
         /**
          * Returns the current process state.
          * @return int the process state value
          * @see org.omg.Session.task_state
          */
          long getProcessState();

         /**
          * Returns the task coordinating this process.
          * @return TaskAdapter the adapter of the <code>Task</code> coordinating 
          *   the procesor instance.
          */
          TaskAdapter getTask();
      };

      abstract interface AbstractProcessor
      {

       /**
        * The processor description.
        */
        attribute string description;

       /**
        * Returns a reference to the task coordinating this process.
        * @return Task the coordinating task
        */
        task::Task get_task();

       /**
        * Starts a processor.
        * @exception CannotStart if the processor cannot be started.
        * @exception AlreadyRunning if the processor is already in a running state.
        */
        void start 
        ( 
        ) 
        raises 
        (
            Session::CannotStart, 
            Session::AlreadyRunning
        );

       /**
        * Suspends a processor.
        * @exception CannotSuspend if the processor cannot be suspended.
        * @exception CurrentlySuspended if the processor is already in a suspended state.
        */
        void suspend
        ( 
        ) 
        raises
        (
            Session::CannotSuspend, 
            Session::CurrentlySuspended
        );

       /**
        * Stops a Processor.
        * @exception CannotStop if the processor cannot be stopped.
        * @exception NotRunning if the processor is not in a running state.
        */
        void stop
        (
        )
        raises 
        (
            Session::CannotStop, 
            Session::NotRunning
        );

       /**
        * The processor state is determined by the state of its execution and the state of the 
        * data content being processed. The processor state and data state are related but 
        * independent. The data state contains information about the application or 
        * system object. The processor state contains information about the execution
        * context. 
        * @return task_state current state of the processor
        */
        Session::task_state get_process_state();
      };

     /**
      * The <code>net.osm.session.processor.Processor</code> interface provides access to the operations
      * required to manage an abstract resource acting in the role of a processor.
      * As a <code>AbstractProcessor</code> the reference can handle general request
      * related to process exeuction such as start, suspend, stop, etc. together with
      * operations supporting access to the processor description and process state.
      */
      interface Processor : Session::AbstractResource, resource::AbstractResource, AbstractProcessor
      {
      };
  };

   /**
    * Executes is a link that defines the association from an AbstractResource
    * and a target Task.  The AbstractResource plays the role of processor of 
    * of the Task it is executing.  The invesrse association is the ExecutedBy 
    * link held by the target Task.
    */
    valuetype Executes : Session::Execution 
    {
       /**
        * The <code>Task</code> that is executed by the <code>AbstractResource</code> 
        * holding this link.
        */
        public Session::Task resource_state;
    };

   /**
    * ExecutedBy is a link that defines the association from an Task
    * to an <code>AbstractResource</code> acting as processor. The inverse 
    * association is the Executes link held by the target <code>AbstractResource</code>.
    */
    valuetype ExecutedBy : Session::Execution 
    {
       /**
        * The <code>AbstractResource</code> that is processing the <code>Task</code>.
        */
        public Session::AbstractResource resource_state;
    };

   /**
    * Exception thrown by the gateway when attempting to resolve a user reference
    * relative to an underlying principal if the principal is unknown within the scope
    * of the gateway.
    */
    exception UnknownPrincipal
    {
       string message;
    };

   /**
    * The <code>Home</code> interface defines the primary point-of-presence for 
    * the Task and Session business object model through supply of services enabling
    * resolution of a principal object identity and access to adapted servies.
    */
    interface Home : corbaloc::Finder, corbaloc::Chooser, finder::Finder, chooser::Chooser
    {
       /**
        * Returns a user relative to the undelying principal.
        * @param policy TRUE if a new should be created if the principal is unknown
        *   otherwise, the UnknownPrincipal exception will be thrown if the principal
        *   cannot be resolved to a user reference
        * @return User the user object reference
        * @exception UnknownPrincipal if the underlying principal does not
        *    match a registered user.
        */
        user::User resolve_user( in boolean policy ) raises ( UnknownPrincipal );   
    };

};

#endif // _OSM_SESSION_IDL_


package net.osm.shell;

import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.math.BigInteger;
import java.awt.Frame;
import java.awt.Font;
import java.awt.Dimension;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.ActionEvent;
import java.awt.event.WindowListener;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.AbstractAction;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.JScrollPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JMenuBar;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;

import net.osm.util.ExceptionHelper;
import net.osm.shell.ShellException;
import net.osm.shell.Shell;
import net.osm.shell.ScrollView;
import net.osm.shell.SplitPane;
import net.osm.shell.Entity;
import net.osm.shell.FeaturesPanel;

/**
 * The <code>PropertiesDialog</code> class manages a modal dialog 
 * containing properties exposed under the <code>Entity<code> passed
 * to the class constructor. The <code>PropertiesDialog</code> 
 * populates a window with a series of tabs, the first corresponding
 * to a table of property named values.  Subsequent tabs in the 
 * window are generated by the PropertiesDialog invoking the
 * <code>getPropertyPanels<code> method on the supplied entity.
 *
 * @author  Stephen McConnell
 * @version 1.0 01 SEP 2001
 */
final class PropertiesDialog extends JDialog implements PropertyChangeListener
{

    //==========================================================
    // state
    //==========================================================

    private boolean trace = false;

    private final Entity entity;
    private final Entity base;

    private Desktop desktop;

    private String name;

    //==========================================================
    // constructor
    //==========================================================

   /**
    * Default constructor.
    */
    public PropertiesDialog( String name, Entity entity, Desktop desktop ) 
    {
        this( name, entity, entity, desktop, new Dimension( 400, 450 ) );
    }

   /**
    * Default constructor.
    */
    public PropertiesDialog( String name, Entity base, Entity entity, Desktop desktop, Dimension size ) 
    {
        super( desktop, name + ": " + base.getName() );
        this.entity = entity;
        this.base = base;
	  this.name = name;
        base.addPropertyChangeListener( this );
	  this.desktop = desktop;
        createPropertiesDialog( size );
    }

   /**
    * Creates a tabbed pane containing a "General" tab and a "Features" tab.
    * The "general" tab contains infomation about the <code>Entity</code> and 
    * the "Features" tab contains properties of the entity that this properties
    * dialog is presenting.
    *
    * @param event the action event triggering presentation of the properties dialog
    * @return JDialog the properties dialog
    */
    private void createPropertiesDialog( Dimension size )
    {
        //
        // Create a tabbed pane
        //

        PropertiesView tabbedPane = new PropertiesView( desktop, entity );

        //
        // Create the button controls
        //

        JButton cancel = new JButton( );
        JButton apply = new JButton( );
        JButton ok = new JButton( );

        Action cancelAction = new HideWindowAction( "Cancel", cancel );
        Action applyAction = new HideWindowAction( "Apply", apply );
        Action okAction = new HideWindowAction( "OK", ok );
  
        cancel.setAction( cancelAction );
        apply.setAction( applyAction );
	  applyAction.setEnabled( false );
        ok.setAction( okAction );

        JPanel buttonPanel = new JPanel( new FlowLayout( FlowLayout.RIGHT ) );
        buttonPanel.add( cancel );
        buttonPanel.add( apply );
        buttonPanel.add( ok );
        Box buttonHolder = new Box( BoxLayout.Y_AXIS );
        buttonHolder.add( buttonPanel );

        //
        // package
        //
        
        JPanel holder = new JPanel( new BorderLayout() );
        holder.add( tabbedPane, BorderLayout.CENTER );
        holder.add( buttonHolder, BorderLayout.SOUTH );

	  setContentPane( holder );
	  setSize( size );
        setLocationRelativeTo( desktop );
        getRootPane().setDefaultButton( ok );
    }

    private ScrollView getFeatureView()
    {
	  try
	  {
	      return new ScrollView( 
              new FeaturesPanel( 
		    entity, "Features", 
		    desktop.getDefaultFont() 
	        )
            );
	  }
	  catch( Throwable e )
	  {
		final String error = "unable to get a features view";
		throw new RuntimeException( error, e );
        }
    }

    //==========================================================
    // PropertyChangeListener
    //==========================================================

   /**
    * Listens to property changes from pages.
    */
    public void propertyChange( PropertyChangeEvent event )
    {
        if((event.getSource() == base ) && (event.getPropertyName().equals("name")))
	  {
		setTitle( name + ": " + base.getName() );
	  }
    }
}

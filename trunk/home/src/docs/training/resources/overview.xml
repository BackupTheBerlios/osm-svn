<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Resource Management</title>
  </properties>

  <body>

    <section name="Resource Management Overview">

      <subsection name="Introduction to Transit Resource Managmeent">

        <p>A typical Transit URL is show below:</p>

        <code>artifact:jar:dpml/metro/dpml-metro-composition#3000</code>

      <p>
      The above URL is referencing a 'jar' resource within the group 'dpml/metro', named
      'dpml-metro-composition', and version '3000'. This information is sufficient for 
      Transit to retrieve the resource from one of resurce hosts it is associated with and 
      locally cache the resource. 
      </p>

      <p>In effect ...</p>
<pre>
    |-----------------------------------|
    | artifact:thing:mygroup/myname#123 | is a URI
    |-----------------------------------|
            | 
            | is handled by 
            |
    |-----------------------------------| n    1 |-----------| 1   n |----------------|
    | net.dpml.transit.artifact.Handler | &lt;&gt;---- | Transit   | &lt;&gt;----| ResourceHost   |
    |-----------------------------------|        |-----------|       |----------------|
</pre>

      <p>
      Using URIs you can reference and work with resources in a more abstract manner as your 
      dealing with a URI as opposed to a URL.  A URI "identifies" a resource whereas a URL 
      "locates" a resource.  Transit maps URIs to URLs when interogating 
      resource host that are declared within the Tranist configuration. As Transit 
      supports multiple hosts and multiple protocols you in effect remove resource
      location concerns from you code.
      </p>

      <p>
      Here is an example of URI and URL construction:
      </p>

      <source>String path = "artifact:jar:dpml/metro/dpml-metro-composition#3000";
URI uri = new URI( path );
URL url = uri.toURL();</source>

      <p>
      To use Transit in your application you will need to ensure that the following two 
      conditions are met:
      </p>

      <ol>
        <li>the system property <code>java.protocol.handler.pkgs</code> is declared
          with a value including <code>net.dpml.transit</code>. For example:<br/><br/><code>
   System.setProperty( "java.protocol.handler.pkgs", "net.dpml.transit" );</code><br/><br/></li>
        <li>the <code>dpml-transit-main.jar</code> is included within the system classloader</li>
      </ol>

      <p>
      If you plan on using Transit in a production scenario you will want to take a close 
      look at the information concerning the <a href="http://www.dpml.net/transit/config">
      setup and configuration of Transit</a>.
      </p>

      </subsection>

      <subsection name="Summary">
      
        <p>
        This overview has presented Tranist in terms of its role as an abstract protocol handler
        and the mechanisms used to map transit uris to urls.  The next tutorial goes into
        more detail concerning the <a href="artifacts.html">usage of the <tt>artifact:</tt> 
        protocol</a> when handling simple resources such as property files, xml data files, 
        etc.
        </p>

      </subsection>
      
    </section>
  </body>
</document>


<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Context Driven Development</title>
  </properties>

  <body>

    <section name="Working with Context">

      <subsection name="Tutorial Objective">

        <p>
        The purpose of this tutorial is to introduce the Metro Context model and the 
        contract this represents between a container and a component.
        </p>
      
        <p>
        Supporting classes:
        </p>

        <table>
          <tr>
            <td><a href="context/Demo.java.html">Demo.java</a></td>
            <td>A component implementation incorporating a Context inner interface.</td>
          </tr>
        </table>

      </subsection>

      <subsection name="Asserting Operational Requirements">

        <p>
        Components are typically established and deployed dynamically
        by a controlling system.  To do this the controlling system 
        needs to know about the operational requirements of the 
        component and delivery mechanism assumed by a component. Within 
        the Metro component model both the declaration of requirement and 
        the delivery mechanism are described using a <tt>Context</tt> inner 
        interface within a component implementation class.  
        </p>
        
        <p>
        For example ...
        </p>

<source>
package org.acme;

import java.util.logging.Logger;
import java.util.logging.Level;

public class Demo
{
    <font color="darkred">public interface Context
    {
        String getActivity();
        String getOwner();
        String getTarget();
        String getColor();
    }</font>
    
    public Demo( final Logger logger, final Context context )
    {
        if( logger.isLoggable( Level.INFO ) )
        {
            final String owner = context.getOwner();
            final String activity = context.getActivity();
            final String target = context.getTarget();
            final String color = context.getColor();
            final String message = 
              activity + " " + owner + "'s " + target + " " + color + ".";
            logger.info( message );
        }
    }
}
</source>

        <p>
        The Context interface is a component driven contract.  The information 
        disclosed in the interface can be analysed by a container.  The container
        is any system acting in the role of component manager (which
        could be a dedicated container solution or a simple testcase).
        </p>

      </subsection>


      <subsection name="Context Interface Semantics">
      
        <p>
        Looking closer at the Context interface declared by the Demo class we have 
        an inner class declaration:
        </p>

<source>public interface Context
{
    String getActivity();
    String getOwner();
    String getTarget();
    String getColor();
}
</source>

        <p>
          This contract is stating that an implementation of the Context interface 
          <strong>must</strong> supply values for the features <code>activity</code>, 
          <code>owner</code>, and <code>target</code>, and <tt>color</tt> - 
          each of which (in this example) are instances of <code>java.lang.String</code>.
        </p>

        <p>
          <i>
          Noteable points:
          </i>
        </p>

        <ol>
          <li>no exceptions in method declaration</li>
          <li>dependency type is the method return type (and any return type 
              including primitives, arrays, custom interfaces and classes are valid 
              return type)
          </li>
          <li>the dependency key is based on the method name applying the bean 
              pattern get[key]
          </li>
          <li>defalt values may be declared as a single method argument</li>
          <li>if a default value is declared it must be assignable to the method  
              return type
          </li>
        </ol>

      </subsection>

      <subsection name="Building the deployment solution">
      
        <p>
        Tje context inner interface is declaring the operation requirements - however, 
        we need to declare somewhere the solution strategy.  We do this by updating our 
        component definition to include a <tt>&lt;context&gt;</tt> block.
        </p>
        
        <p><i>
        The following lines are example of the creation of a component 
        deployment solution (taken from the components/002 project definition).
        Modifications markup shows changes from our initial component definition.
        </i></p>

<pre>
  &lt;project name="acme-demo-context" basedir="context"&gt;
    &lt;types&gt;
      &lt;type id="jar"/&gt;
      &lt;component xmlns="link:xsd:dpml/lang/dpml-component#1.0" 
         type="org.acme.Demo" 
         name="demo"&gt;
        <font color="darkred">&lt;context&gt;
          &lt;entry key="owner" value="${user.name}"/&gt;
          &lt;entry key="activity" value="Painting"/&gt;
          &lt;entry key="target" value="bike"/&gt;
          &lt;entry key="color" value="silver"/&gt;
        &lt;/context&gt;</font>
      &lt;/component&gt;
    &lt;/types&gt;
    &lt;dependencies&gt;
      &lt;test&gt;
        &lt;include ref="ant/ant-junit"/&gt;
        &lt;include ref="dpml/transit/dpml-transit-main"/&gt;
      &lt;/test&gt;
    &lt;/dependencies&gt;
  &lt;/project&gt;
</pre>

      </subsection>

      <subsection name="Testing the component">

        <p>
        During execution of the testcases we see the result of logging the 
        a message reflecting configuration and runtime information.  In
        the <a href="context/DemoTestCase.java.html">DemoTestCase</a> 
        the output is shows the result of concatination of values resolved 
        fro the context implementation supplied by the container to the component instance.
        </p>

<pre>
test:
    [junit] Executing forked test.
    [junit] Running org.acme.test.DemoTestCase
    <font color="darkred">[junit] [16245] [INFO   ] (demo): Painting mcconnell's bike silver.</font>
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.89 sec
</pre>

      </subsection>

      <subsection name="Summary ...">

        <p>
        The container will make best efforts to assemble a viable deployment 
        scenario.  If that scenario cannot be established then your component will 
        not be deployed.  During deployment the container will evaluate all runtime 
        requirements declaring with a #Context innner interface, build an context
        implementation fullfilling the contract (and any other regognized contructor
        arguments) and deploy the component taking into account lifecyle and lifestyle
        (but more of these subject later in the tutorial).
        </p>
        
        <p>
        The <a href="context-examples.html">next tutorial</a> provides a demonstration 
        of the context contract within which we use primitive and complex types together 
        with examples of optional context entries.
        </p>
        
      </subsection>

    </section>

  </body>
</document>




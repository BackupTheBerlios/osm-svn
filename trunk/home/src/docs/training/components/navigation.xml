<?xml version="1.0" encoding="UTF-8"?>

<!--
 Copyright 2005 Stephen McConnell

 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at

   http://www.dpml.net/central/about/legal/

 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.

 See the License for the specific language governing permissions and
 limitations under the License.
-->

<project>

 <title>Metro Training Programme</title>

 <body>

    <menu>
      <item name="Context" href="context/index.html"/>
      <item name="Parts" href="parts/index.html"/>
      <item name="Lifestyle" href="lifestyle.html"/>
      <item name="Lifecycle" href="lifecycle.html"/>
    </menu>

 </body>

 <!--
      <subsection name="Semantics">

         <p>
         But what about implementation semantics?  
         Is this component thread-safe.  What are the static charateristics of 
         this component - what are the logging assumptions, the dependencies implied 
         by the Context argument, configuration and parameter presumations, what 
         about garbage collection?
         </p>

         <p>
         We build information about static semantics using an ant task named "type".  This 
         tasks grills the component class and creates a serialized object with
         a bunch of information about the component implementation which it stores 
         along side the component class.
         </p>

         <p>
         Here's an example of static data collection using an Ant build file:
         </p>

         <pre><![CDATA[  <target name="build" depends="standard.build">
    <c:type class="net.osm.tutorial.SimpleWidget" threadsafe="true"/>
  </target>]]></pre>

         <p>And the build output from the above is ..
         </p>
         
         <pre>  [c:type] creating [net.osm.tutorial.SimpleWidget] </pre>

         <p>But more important is the output .. take a look in your <code>
            ${basedir}/target/classes</code> directory and you will find 
            an additional resource named <code>[classname].type</code>. This 
            file contains a serialized representation of you component.  The
            information it contains will be used by built-time and run-time
            systems during the prepration and execution phases.
         </p>
         
      </subsection>
    -->

</project>

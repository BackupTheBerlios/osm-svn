<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Logging Services</title>
  </properties>

  <body>

    <section name="Logger">

      <subsection name="Tutorial Objective">

        <p>
        The objective of this tutorial is to general logging management within Metro.  
        The Metro runtime recognizes two logging classes - the
        first is the defacto standard <tt>java.util.logging.Logger</tt>.  The 
        second is a pragmatic wrapper that presents a logging channel as an 
        immutable service exposing a small number of logging functions.
        </p>
        
      </subsection>

      <subsection name="Recognized Logger Classes">
      
        <p>
        The following table summarises the two logging classes that are 
        recognized by the Metro runtime platform as valid constructor arguments. 
        </p>
        
        <table>
          <tr>
            <td>java.util.logging.Logger</td>
            <td>
            This is the defacto logging implementation included within 
            the Java Runtime.  Generally speaking the <tt>Logger</tt> class
            provides everything you need although it leaves a lot of room 
            for consolidation (hence the provision of an alternative).
            </td>
          </tr>
          <tr>
            <td>net.dpml.logging.Logger</td>
            <td>
            This is an interface that exposes a small set of query and execution 
            operation concerning logging. The <tt>Logger</tt> class provides 
            support for priority evaluation (logger.isXxxxEnabled) and priority-based 
            log message generation (logger.info( ... ), etc.).  The standard logging priorities
            supported by the interface include <tt>debug</tt>, <tt>info</tt>, 
            <tt>warning</tt>, <tt>error</tt>, and <tt>trace</tt>. In addition to query and actionable
            operations, the Logger interface declares the <tt>getChildLogger( &lt;name&gt; )</tt>
            method, enabling access to a logging channel that is a subsidiary of the assigned
            logging channel.
            </td>
          </tr>
        </table>
        
      </subsection>

      <subsection name="The DPML Logger">
      
        <p>
        The DPML <tt>Logger</tt> interface exposes a set of operations that meet 
        the requirements of a component implementation.  More specifically - the
        DPML <tt>Logger</tt> interface does not expose operations dealing with channel
        management.  A typical usage scenario is demonstrated in the following code 
        fragment:
        </p>
        
        <source>
import net.dpml.logging.Logger;
        
public class Demo
{
    public Demo( <font color="darkred">final Logger logger</font> )
    {
        if( <font color="darkred">logger.isTraceEnabled()</font> )
        {
            <font color="darkred">logger.trace(</font> "commencing instantiation cycle" <font color="darkred">)</font>;
        }
        if( <font color="darkred">logger.isInfoEnabled()</font> )
        {
            <font color="darkred">logger.info(</font> "Hello." <font color="darkred">)</font>;
        }
        if( <font color="darkred">logger.isDebugEnabled()</font> )
        {
            <font color="darkred">logger.debug(</font> "instantiation complete." <font color="darkred">)</font>;
        }
    }
}
        </source>
        
        <p>
        The following table summarises the mapping of priorities in the DPML Logger with 
        priority values used in the <tt>java.util.logging</tt> framework:
        </p>
        
        <table>
          <tr>
            <td></td>
            <td>Java</td>
            <td>Recommended Usage</td>
          </tr>
          <tr>
            <td>TRACE</td>
            <td>FINER</td>
            <td>Low-level developer debugging.</td>
          </tr>
          <tr>
            <td>DEBUG</td>
            <td>FINE</td>
            <td>Debug information that summarises implementation activity.</td>
          </tr>
          <tr>
            <td>INFO</td>
            <td>INFO</td>
            <td>Significant application events.</td>
          </tr>
          <tr>
            <td>WARN</td>
            <td>WARNING</td>
            <td>Notification of potential issues.</td>
          </tr>
          <tr>
            <td>ERROR</td>
            <td>SEVERE</td>
            <td>Notification of an error condition.</td>
          </tr>
        </table>
        
      </subsection>
      
      <subsection name="Testcase Logging Configuration">
      
        <p>
        The Junit test tasks which is automatically executed if a src/test directory 
        is present will check for the presence of a file named etc/data/logging.properties
        and if present - that file will be used as the logging configuration for the test
        task phase.  The following configuration file sets the default logging priority 
        level to <tt>INFO</tt> and overrides logging channel priority for the demo component
        with a <tt>FINE</tt> priority. 
        </p>
<source>.level=INFO
demo.level=FINE
</source>

        <p>
        Testcase output with the above configuration is shown below:
        </p>
        
        <pre>
test:
    [junit] Created dir: C:\dev\osm\trunk\tutorial\components\logging\target\reports\test
    [junit] Executing forked test.
    [junit] Running org.acme.logging.LoggingDemoTestCase
    <font color="blue">[junit] [90261] [FINE   ] (demo): established per-thread lifestyle handler for [org.acme.logging.Demo]
    [junit] [90261] [INFO   ] (demo): Hello!
    [junit] [90261] [FINE   ] (demo): instantiation complete
    [junit] [90261] [FINE   ] (demo): instantiated [32820206]
    [junit] [90261] [FINE   ] (demo): activated [32820206]</font>
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.75 sec</pre>
        
      </subsection>
      
      <subsection name="Summary">
      
        <p>
        Irrespect of the logging constructor type you choose, in both cases the underlying
        log channel management is based on the management utilities provided withing the 
        <tt>java.util.logging</tt> package.  In particular, this means that the logging 
        configuration (channel priority, channel targets, etc. may be changed at runtime 
        by an independent management application.
        </p>

      </subsection>

    </section>

  </body>
</document>


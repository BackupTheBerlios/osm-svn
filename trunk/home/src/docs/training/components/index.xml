<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Component Development</title>
  </properties>

  <body>
  
    <section name="Overview">
    
      <p>
      In the tutorials dealing with <a href="../resources/plugins.html">Transit
      Plugins</a> we covered the general subject of a description of a deployment 
      unit based on the association of an object instantiation strategy with a 
      definition of a classloader chain. The <a href="http://www.dpml.net/metro">
      Metro component management system</a> extends the <tt>part</tt> deloyment 
      strategy with a complete context driven 
      <a href="http://www.dpml.net/metro/concepts/ioc.html">IOC</a> object 
      instantiation model.
      </p>
    
      <p>
      Beyond instantiation there are several aspects of a class that 
      effect its deployment.  These aspects include thread-safety (expressed 
      via a component lifestyle policy), a component lifecycle (expressed 
      via a formal state-transition graph), and a component garbage collection
      policy.  Each of these concerns are expresssed as optional component 
      type characteristics.
      </p>

      <subsection name="Type Semantics">

        <table>
          <tr>
            <td><a href="lifestyle.html">Lifestyle</a></td>
            <td>
            Overview of different lifestyle policies and the effect that 
            lifestyle policies have on instantiation and sharing.
            </td>
          </tr>
          <tr>
            <td><a href="lifecycle.html">Lifecycle</a></td>
            <td>
            Introducing the initialization, execution and termination lifecycle
            and the supporting state-transition model.
            </td>
          </tr>
          <tr>
            <td><a href="collection.html">Collection</a></td>
            <td>
            Introducing the available garbage collection policies that can be 
            associated with a component instance.
            </td>
          </tr>
        </table>

      </subsection>

      <subsection name="Metro Constructor Parameters">

      <p>
      Generally speaking information can be supplied to a component 
      as a constructor argument or via setter operations. In the examples 
      provided here we use a variation of constructor-based injection 
      wherein information is supplied to a component by a container through 
      dynamically constructed instances that implement component-defined 
      contracts.
      </p>

        <table>
          <tr>
            <td width="15%"><a href="logger/index.html">Logger</a></td>
            <td>
            Introduction to the semantics concerning the usage of a 
            <tt>Logger</tt> as a common constructor argument.
            </td>
          </tr>
          <tr>
            <td><a href="context/index.html">Context</a></td>
            <td>
            Introduction to <tt>#Context</tt> inner interface wherein a 
            component implemention declares the interface of the context 
            object that to be supplied by the runtime container.  In effect, 
            the component Context interface is the declaration by a component
            of it's functional dependencies with the outside world.
            </td>
          </tr>
          <tr>
            <td><a href="parts/index.html">Parts</a></td>
            <td>
            Introducing component composition through encapsulation of
            and management of a collection of internal parts that are 
            strongly aggregated to (considered as a part of) the enclosing
            component instance (i.e. destruction of the component implies 
            destruction of all internal parts).
            </td>
          </tr>
        </table>

      </subsection>

    </section>

  </body>

</document>




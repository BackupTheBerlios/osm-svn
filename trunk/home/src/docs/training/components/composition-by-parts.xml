<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Component in a Context</title>
  </properties>

  <body>

    <section name="Composite Components">

      <p>
      In the previouse tutorials we have focussed on the Context inner interface
      and the role it provides in the declaration by the component of the resources
      it needs as a part of the instantiation process.  Generally speaking anything 
      we declare within a Context interface can be viewed as a dependency releationship.
      In effect - if we declare something in a Context interface we are basically 
      stating that our component can only exst if and only if all required context 
      dependencies can be fully resolved.
      </p>
      
      <p>
      Another type of relationship - composition - is the subject of this tutorial.
      Within a composition relationship a component can act as a container of other 
      components.  More specifically - an enclosing component may contain subsidiary 
      components wherein the destruction of the enclosing component implies the 
      destruction of all subsidiary components (i.e. strong aggregation).
      Support for composition is provided via the inner <tt>Parts</tt> interface 
      combined with a <tt>&lt;parts&gt;</tt> element in our component definition.
      The following implementation class demonstrates the usage of a parts interface
      acting as a convinient type-safe accessor to internal resources.
      </p>

      <subsection name="Component Example">

        <p>
        <tt>tutorial/components/005</tt>:
        </p>

        <table>
          <tr>
            <td><a href="005/Demo.java.html">Demo.java</a></td>
            <td>Our demo component updated to reflect the usage of 
            the inner Parts interface.</td>
          </tr>
        </table>
        
        <p>
        The deployment solution is presented below.  The only difference to our
        earlier example is the usage of the <tt>&lt;parts&gt;</tt> element instead
        of a <tt>&lt;context&gt;</tt> element.
        </p>
        
<pre>
  &lt;project name="acme-demo-005" basedir="005"&gt;
    &lt;types&gt;
      &lt;type id="jar"/&gt;
      &lt;component xmlns="link:xsd:dpml/lang/dpml-component#1.0" 
         type="org.acme.Demo" 
         name="demo"&gt;
        <font color="darkred">&lt;parts&gt;
          &lt;component key="theWidget" type="org.acme.Widget" name="widget"&gt;
            &lt;context&gt;
              &lt;entry key="color" method="BLUE"/&gt;
            &lt;/context&gt;
          &lt;/component&gt;
        &lt;/parts&gt;</font>
      &lt;/component&gt;
    &lt;/types&gt;
    &lt;dependencies&gt;
      &lt;test&gt;
        &lt;include ref="ant/ant-junit"/&gt;
        &lt;include ref="dpml/transit/dpml-transit-main"/&gt;
      &lt;/test&gt;
    &lt;/dependencies&gt;
  &lt;/project&gt;
</pre>

      </subsection>
      
      <subsection name="Testing the component">

        <p>
        The following testcase log output is for all practival purposes the 
        same as the earlier context example.  If important difference is that
        consumer application (in this case a testcase) is unaware of the implementation
        strategy (dependency fullfillment via context versus internal fullfilment via
        parts).
        </p>

<pre>
test:
    [junit] Created dir: C:\dev\osm\trunk\tutorial\components\005\target\reports\test
    [junit] Executing forked test.
    [junit] Running org.acme.test.DemoTestCase
    [junit] [18906] [INFO   ] (demo): located the color java.awt.Color[r=0,g=0,b=255]
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.906 sec
</pre>

      </subsection>
      
    </section>

  </body>

</document>


<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Building on the Sholders of Giants</title>
  </properties>

  <body>

    <section name="Building on the Sholders of Giants">

      <subsection name="Tutorial Objective">

        <p>
        This tutorial aims to demonstrate the reuse of existing component
        jar files and deployment definitions. The demonstration uses three projects 
        involving an API, an implementation of that API, and a demo component and  
        associated testcase.  The API is used by both the implementation and the demo and 
        the implementation is plugged into our demo component at runtime. Appart from
        the direct demonstration of different combination techniques used in component 
        construction, the tutorial details the impact on classloader chain construction.
        </p>
        
      </subsection>
      
      <subsection name="Project Definitions">
      
        <p>
        The clock API is defined in a separate project so that we can reuse the
        service interface <a href="Clock.java.html">Clock</a> in our 
        demo and implementation projects.  The separation of the API into a separate
        jar file ensures that the jar file can exist at a level in a classloader
        heirachy appropriate for its role as a shared contract (as destint from 
        an jar file containing an private implementation which would typically 
        exist at a lower level in the classloader heirachy).
        </p>
        
            <pre><![CDATA[
  <project name="acme-clock-api" basedir="api">
    <types>
      <type id="jar"/>
    </types>
  </project>
            ]]></pre>

        <p>
        The <tt>acme-clock-impl</tt> project contains a clock 
        implementation <a href="SimpleClock.java.html">SimpleClock</a> 
        together with deployment information (as a part artifact).  
        The project definition includes a runtime dependency on the 
        <tt>acme-clock-api</tt> API project and as such, the runtime 
        classloader chain definition for the implementation will include
        a reference to its own jar file and the api jar file (as 
        artifact uris).
        </p>
        
        <pre><![CDATA[
  <project name="acme-clock-impl" basedir="clock">
    <types>
      <type id="jar"/>
      <component xmlns="link:xsd:dpml/lang/dpml-component#1.0" 
           type="org.acme.scheduler.SimpleClock" alias="true"/>
    </types>
    <dependencies>
      <runtime>
        <include key="acme-clock-api"/>
      </runtime>
    </dependencies>
  </project>
        ]]></pre>

        <p>
        The <tt>acme-clock-demo</tt> project is an example of a 
        component definition that incorporates the clock implementation
        as an internal part and uses the implementation through
        the service API. In the following project definition we have 
        included the clock implementation deployment data by referencing the 
        external data as a component <tt>uri</tt> argument (as such we are 
        defining a new component type that extends from the base component
        referenced by the uri value) and we are overriding the context 
        format argument with a new value.
        In addition we have declared a build time dependency 
        on the <tt>acme-clock-impl</tt> (just to ensure that it is build 
        before or demo project is built). It is important to note that
        a build time dependency only concerns build secuencing and does not
        impact our runtime dependency model.  In fact, during runtime the 
        demo component is established and the clock implementation is created
        within a classloader that is a child of the enclosing demo component
        classloader.  As such, the implementation classes are private to the 
        implementation component and the common APIs are provided via the  
        demo components classloader.
        </p>
        
        <pre><![CDATA[
  <project name="acme-clock-demo" basedir="demo">
    <types>
      <type id="jar"/>
      <component xmlns="link:xsd:dpml/lang/dpml-component#1.0"
           type="org.acme.demo.Demo">
        <parts>
          <component key="clock" uri="link:part:org/acme/import/acme-clock-impl">
            <context>
              <entry key="format" value="h:mm a"/>
            </context>
          </component>
        </parts>
      </component>
    </types>
    <dependencies>
      <build>
        <include key="acme-clock-impl"/>
      </build>
      <runtime>
        <include key="acme-clock-api"/>
        <include ref="dpml/util/dpml-logging-api"/>
      </runtime>
      <test>
        <include ref="ant/ant-junit"/>
        <include ref="dpml/transit/dpml-transit-main"/>
      </test>
    </dependencies>
  </project>
        ]]></pre>
      
      </subsection>
            
      <subsection name="Summary">
      
        <p>
        </p>

      </subsection>

    </section>

  </body>
</document>


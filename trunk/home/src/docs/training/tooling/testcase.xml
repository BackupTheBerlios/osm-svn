<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Component Development Strategies</title>
  </properties>

  <body>

    <section name="Adding testcases">

      <subsection name="Tutorial Objective">

        <p>
        The objective of this tutorial is to demonstrate the addition of a 
        JUnit testcase and show how this is included automatically in your 
        build process.
        </p>

      </subsection>

      <subsection name="Creating the Testcase">

        <p>
        All we need to do is to add the test case source to the test codebase 
        <code>[project]/src/test/[package]/[classname].java</code>.
        In the case of the <code>system</code> project this means adding our testcase
        to the <code>dev/system/src/test/acme/impl/test/DefaultWidgetTestCase.java</code>.
        Note: we are using the package name <code>acme/impl/test</code> so that
        we properly simulate usage of our class as an external client by ensuring 
        we are not executing in the same package namespace as the target.
        </p>

        <source>
package acme.impl.test;

import junit.framework.TestCase;

import acme.Widget;
import acme.impl.DefaultWidget;

public class DefaultWidgetTestCase extends TestCase
{
    public void testDefaultMessage() throws Exception
    {
        DefaultWidget widget = new DefaultWidget();
        String result = widget.buildMessage( null );
        String expected = "I'm a plain old widget.";
        assertEquals( "default", expected, result );
    }

    public void testExplicitMessage() throws Exception
    {
        DefaultWidget widget = new DefaultWidget();
        String color = "blue";
        String result = widget.buildMessage( color );
        String expected = "I'm a " + color + " widget.";
        assertEquals( "explicit", expected, result );
    }

    public void testImplementsWidget() throws Exception
    {
        DefaultWidget impl = new DefaultWidget();
        try
        {
            Widget widget = (Widget) impl;
        }
        catch( ClassCastException e )
        {
            fail( "DefaultWidget does not implement the Widget service interface." );
        }
    }
}</source>
      </subsection>

      <subsection name="Updating the system project test dependencies">

        <p>
        The above addition of a testcase to the system project introduces 
        new test-time dependencies.  To enable the compilation of the 
        testcase we need to update out project definition to include 
        Ant's Junit extension. Notice that the revised library.xml 
        includes the following updates:
        </p>

        <ol>
          <li>Import of the external ant module.</li>
          <li>Addition of a test scope <tt>&lt;dependencies&gt;</tt>
              element to the server project containing the 
              reference to the external <tt>ant-junit</tt> resource 
              defined under the imported <tt>ant</tt> module.</li>
        </ol>

<source>
&lt;library xmlns="artifact:xsd:dpml/lang/dpml-module#1.0"&gt;

  <font color="darkred">&lt;imports&gt;
    &lt;import uri="link:module:ant"/&gt;
  &lt;/imports&gt;</font>

  &lt;modules&gt;

    &lt;module name="acme"&gt;

      &lt;project name="acme-client" basedir="client"&gt;
        &lt;types&gt;
          &lt;type id="jar"/&gt;
        &lt;/types&gt;
      &lt;/project&gt;
    
      &lt;project name="acme-system" basedir="system"&gt;
        &lt;types&gt;
          &lt;type id="jar"/&gt;
        &lt;/types&gt;
        &lt;dependencies&gt;
          &lt;include key="acme-client"/&gt;
        &lt;/dependencies&gt;
        <font color="darkred">&lt;dependencies scope="test"&gt;
          &lt;include ref="ant/ant-junit"/&gt;
        &lt;/dependencies&gt;</font>
      &lt;/project&gt;
      
    &lt;/module&gt;

  &lt;/modules&gt;

&lt;/library&gt;
</source>

      </subsection>

      <subsection name="Rebuild">

        <p>
        Rebuild the system project.
        </p>

<pre>
$ build -select acme/system
</pre>

        <p>
        The builder will look for testcases in the projects <tt>src/test</tt>
        directory and compile these taking into account the project's runtime and test 
        dependencies.
        </p>

        <p>
        Output from the system projects build during the test pahse should look like 
        the following:
        </p>
<pre>
test:
    [javac] Created dir: C:\dev\system\target\classes\test
    [javac] Compiling 1 source file to C:\dev\system\target\classes\test
    [junit] Created dir: C:\dev\system\target\reports\test
    [junit] executing in local jvm
    [junit] Running acme.impl.test.DefaultWidgetTestCase
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.016 sec
</pre>

      </subsection>

    </section>

  </body>

</document>


<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Component Development Strategies</title>
  </properties>

  <body>

    <section name="Creating a group Module">

      <subsection name="Tutorial Objective">

        <p>
        The objective of this tutorial is to intrioduce the concept of a module
        and walk through the process of module creation.  The tutorial concludes
        with the summary of the generated module artifact and a description of 
        how a module can be used when sharing your project resources with others.
        </p>

      </subsection>

      <subsection name="dev/library.xml">

        <p>
        We need to update our library.xml file to include the declaration of a
        module basedir and the assignment of an output artifact type.
        </p>

<source>
&lt;library xmlns="artifact:xsd:dpml/lang/dpml-module#1.0"&gt;

  &lt;imports&gt;
    &lt;import uri="link:module:ant"/&gt;
  &lt;/imports&gt;

  &lt;modules&gt;

    &lt;module name="acme" <font color="darkred">basedir="."</font>&gt;

      <font color="darkred">&lt;types&gt;
        &lt;type id="module"/&gt;
      &lt;/types&gt;</font>

      &lt;project name="acme-client" basedir="client"&gt;
        &lt;types&gt;
          &lt;type id="jar"/&gt;
        &lt;/types&gt;
      &lt;/project&gt;
    
      &lt;project name="acme-system" basedir="system"&gt;
        &lt;types&gt;
          &lt;type id="jar"/&gt;
        &lt;/types&gt;
        &lt;dependencies&gt;
          &lt;include key="acme-client"/&gt;
        &lt;/dependencies&gt;
        &lt;dependencies scope="test"&gt;
          &lt;include ref="ant/ant-junit"/&gt;
        &lt;/dependencies&gt;
      &lt;/project&gt;
      
    &lt;/module&gt;

  &lt;/modules&gt;

&lt;/library&gt;
</source>

      </subsection>

      <subsection name="Validating Module Definition">

        <p>
        To validate that the module has been declared correctly you should be able
        list information about the module project using the following command:
        </p>

<pre>
$ build -list -select acme

Listing module [acme]

module:acme

  version: SNAPSHOT
  basedir: C:\dev\osm\trunk\tutorial\tooling\104
  imports: (1)
    module:ant
  resources: (2)
    project:acme/acme-client
    project:acme/acme-system
</pre>

        <p>
        Building the module will result in the creation of a module resource
        under the <tt>target/deliverables/modules</tt> subdirectory.
        </p>

<pre>
$ build -select acme
</pre>

        <p>
        The resulting module file is shown below.  The principal differences
        between the original library file and the generated module is the removal
        of build-time concerns.  For example, projects are represented as resource, 
        basedir info has been removed along with build and test pahse dependency 
        information.
        </p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<module name="acme" version="SNAPSHOT"
    xmlns="link:xsd:dpml/lang/dpml-module#1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <types>
    <type id="module" alias="true"/>
  </types>

  <resource name="acme-client" version="SNAPSHOT">
    <types>
      <type id="jar"/>
    </types>
  </resource>

  <resource name="acme-system" version="SNAPSHOT">
    <types>
      <type id="jar"/>
    </types>
    <dependencies>
      <runtime>
        <include ref="acme/acme-client"/>
      </runtime>
    </dependencies>
  </resource>

</module>
]]></source>

      </subsection>

      <subsection name="Referencing the Module Resource">

        <p>
        The contents of the module resources created as an output of the build is
        an encoded XML file.  It contains all module property declarations and our
        two projects in the form of resource definitions suitable for use by external 
        projects in the same way we imported the ant module during the testcase 
        tutorial.
        </p>

        <p><i>Example of an import by an external library of the module created above:</i></p>

<source>
&lt;library&gt;

  &lt;imports&gt;
    &lt;import uri="<font color="darkred">artifact:module:acme#SNAPSHOT</font>"/&gt;
  &lt;/imports&gt;

   &lt;modules&gt;

    ...

  &lt;/modules&gt;

&lt;/library>
</source>

      </subsection>

      <subsection name="Summary">

        <p>
        This tutorial has demonstrated the creation of a stand-alone module definition
        suitable for import by external projects - hoewever - the tutorial has introduced
        an issue in that we have added a SNAPSHOT reference to our library defintion and 
        that is a bad thing.  Our next torial addresses this issue through the declaration 
        and usage of <a href="alias.html">platform independent symbolic links</a>.
        </p>

      </subsection>

    </section>

  </body>
</document>

